import java.util.*;

public class LinkedListGeneric <T> {
    
    private class Node {
        T data;
        Node next;
    }
    
    private Node head;
    private Node tail;
    private int size;
    
    public void display(){
        System.out.println("---------");
        Node temp = this.head;
        while (temp.next!=null){
            System.out.print(temp.data + ", ");
        }
        System.out.println(".");
        System.out.println("---------");
    }
    
    public T getFirst() throws Exception{
        if (this.size==0){
            throw new Exception("Linked List is empty! ");
        }
        return this.head.data;
    }
    
    public T getLast() throws Exception{
        if (this.size==0){
            throw new Exception("Linked List is empty! ");
        }
        return this.tail.data;
    }
    
    public T getAt(int idx) throws Exception {
         if (this.size==0){
            throw new Exception("Linked List is empty! ");
        }
        
        if (idx<0 || idx>=this.size){
            throw new Exception ("Invalid Index! ");
        }
        
        Node temp = this.head;
        for (int i=1;i<=idx;i++){
            temp = temp.next;
        }
        return temp.data;
    }
    
    public void addLast(T item){
        Node nn = new Node();
        nn.data = item;
        nn.next = null ; 
        
        if (this.size>=1){
            this.tail.next = nn;
        }
        
        if (this.size==0){
            this.head = nn;
            this.tail = nn;
            this.size++;
        }
        
        else {
            this.tail = nn;
            this.size++;
        }
    }
    
    public void addFirst(T item){
        
        //create a new Node
        Node nn = new Node();
        nn.data = item;
        nn.next = null;
        
        //attach
        if (this.size>=1){
            nn.next = head;
        }
        
        //summary object 
        if (this.size==0){
            this.head = nn;
            this.tail=nn;
            this.size++;
        }
        else {
            this.head = nn;
            this.size++;
        }
    }
    
    public void addAt(T item, int idx) throws Exception {
        
        if (idx < 0 || idx > size){
            throw new Exception(" Invalid index");
        }
        
        if (idx==0){
            addFirst(item);
        }
        else if (idx == this.size){
            addLast(item);
        }
        else {
            Node nn = new Node();
            nn.data = item;
            nn.next = null;
            
            Node nm1 = getNodeAt(idx - 1);
            Node np1 = nm1.next;
            this.size++;
        }
    }
    
    public T removeFirst() throws Exception{
        if (this.size==0){
            throw new Exception("Linked List is Empty");
        }
        
        T rv = this.head.data;
        
        if (this.size==1){
            this.head=null;
            this.tail=null;
            this.size=0;
        }
        else {
            this.head = this.head.next;
            this.size--;
        }
        
        return rv;
    }
    
    public T removeAt(int idx) throws Exception{
        if (this.size==0){
            throw new Exception("Linked List is already empty");
        }
        if (idx < 0 || idx >= this.size){
            throw new Exception("Invalid Index");
        }
        if (idx==0){
            return removeFirst();
        }
        else if (idx==this.size-1){
            return removeLast();
        }
        else {
            Node nm1 = getNodeAt(idx-1);
            Node n = nm1.next;
            Node np1 = n.next;
            
            nm1.next = np1;
            this.size--;
            
            return n.data;
        }
    }
    
}
